version: "3"

services:

  ### NGINX ################################################
  nginx:
    container_name: dev-nginx
    build: 
      context: ./dockerfile/nginx
    ports: 
      - "80:80"
    volumes:
      - ./data/nginx/html:/usr/share/nginx/html 
      - ./data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf 
      - ./data/nginx/logs:/var/log/nginx 
      - ./data/nginx/conf.d:/etc/nginx/conf.d
    depends_on: 
      - yapi
      - jenkins
    networks:
      - app-network
  
  ### MYSQL ################################################
  mysql:
    container_name: dev-mysql8.0
    build:
      context: ./dockerfile/mysql
      args:
        - TZ=Asia/Shanghai
    environment:
      - MYSQL_ROOT_PASSWORD=888888
    ports:
      - "3306:3306"
    volumes:
      - ./data/mysql:/var/lib/mysql
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci

  ### Redis ################################################
  redis:
    container_name: dev-redis
    build:
      context: ./dockerfile/redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data

  ### MongoDB ##############################################
  mongo:
    container_name: dev-mongo4.4
    build:
      context: ./dockerfile/mongo
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongo:/data
    networks:
      - app-network

  ### Yapi ########################
  yapi:
    container_name: dev-yapi
    build:
      context: ./dockerfile/yapi
    # 第一次启动使用
    # command: "yapi server"
    # 之后使用下面的命令
    command: "node /my-yapi/vendors/server/app.js"
    volumes: 
        - ./data/yapi:/my-yapi
    ports: 
      - 9090:9090
      # - 9091:3000
    depends_on: 
      - mongo
    networks:
      - app-network
  
  ### Jenkins ###################
  jenkins: 
    container_name: dev-jenkins
    build:
      context: './dockerfile/jenkins'
    volumes:  
      - ./data/jenkins/jenkins_home:/var/jenkins_home
    ports:
      # - 8080:8080
      - 50000:50000
    networks:
      - app-network

#######################
networks:
  app-network:
    driver: bridge  